{
  "editor": {
    "content": [
      {
        "id": "dje5tr",
        "content": [
          {
            "id": "bzp67s",
            "content": [
              {
                "content": "Глоссарий",
                "id": "pem2e8",
                "style": 7
              },
              {
                "content": "Сущность – интерфейс, класс, модуль, метод, переменная, объект или функция.",
                "id": "9c1y47"
              }
            ]
          }
        ]
      },
      {
        "id": "initial-page",
        "content": [
          {
            "id": "initial-locale",
            "content": [
              {
                "content": "Общее",
                "id": "ia4vwp",
                "style": 7
              },
              {
                "content": "Нет истинного пути и решения. Есть тот, который лучше всего подходит для решения конкретной задачи.",
                "id": "slbclb"
              },
              {
                "content": "При решении задачи, постарайтесь учесть все возможные ситуации, которые могут возникнуть и реализуйте решение с учетом всех этих ситуаций.",
                "id": "jryi5m"
              },
              {
                "content": "Также при решении задачи попробуй пойти от обратного. Пойми какие результаты в итоге ты хочешь получить и составь на этом основании алгоритм, по которому будет выполняться задача.",
                "id": "sx4iop"
              },
              {
                "content": "Перед тем, как отправить задачу в релиз — проверь правильно ли она работает. Нет ли в ней ошибок. Это касается даже тех коммитов, которые отправляются в твою ветку. Самый идеальный сценарий — тот, в котором никто не смог найти ошибки в функционале, который ты разрабатывал.",
                "id": "iplf3z"
              },
              {
                "content": "Всегда задумывайся о том как можно сделать твой код проще, чище и читабельнее.",
                "id": "hoebpw",
                "style": 6
              },
              {
                "content": "Какими могут быть сценарии использования, входные данные и другие условия, которые могут повлиять на решение задачи?",
                "id": "7gpcmd"
              },
              {
                "content": "Все ли я учел?",
                "id": "fp07e8"
              },
              {
                "content": "Что может пойти не так?",
                "id": "86p197"
              },
              {
                "content": "Что можно объединить?",
                "id": "uqh4ya"
              },
              {
                "content": "Есть ли похожий функционал?",
                "id": "68078y"
              },
              {
                "content": "Что тут лишнее?",
                "id": "vl6ffa"
              },
              {
                "content": "Как сделать проще?",
                "id": "d4a7io"
              },
              {
                "content": "Как сделать читабельнее?",
                "id": "04oi3z"
              },
              {
                "content": "Как сделать понятнее?",
                "id": "dl5mvz"
              }
            ]
          }
        ]
      },
      {
        "id": "4uausm",
        "content": [
          {
            "id": "a17ldu",
            "content": [
              {
                "content": "Чистый код",
                "id": "cbtfox",
                "style": 7
              },
              {
                "content": "Как писать чистый и хороший код? Это похоже на написание книги. Сначала ты делаешь черновик и потом причесываешь его до того состояния, в котором тебе было бы приятно его читать. Всегда помни, что твой код должен рассказывать историю происходящего, чтобы читатель мог ее понять.",
                "id": "gmjprv"
              },
              {
                "content": "Чистый код простой, выразительный и направлен на конкретную задачу.",
                "id": "dx2d23"
              },
              {
                "content": "Чистый код читается легко, как проза. Если это не так, то его стоит рефакторить.",
                "id": "fzxww9"
              },
              {
                "content": "Чистый код легко изменять. Он не должен быть жестко завязан на множестве сущностей. Любую сущность можно легко изменить.",
                "id": "6h3wun"
              },
              {
                "content": "Чистый код намного лучше проходит ревью. Если ревью проходит с огромным количеством комментариев, то он не чистый и его надо рефакторить.",
                "id": "yw8de5"
              },
              {
                "content": "Чистый код всегда выглядит так, словно над ним очень долго трудились. Какие бы пути для его улучшения ты не искал, ты все равно придешь к тому, что этот код лучший. Соответственно, чистый код — продуманный до всех мелочей.",
                "id": "os42zv"
              },
              {
                "content": "Правило бойскаута: Оставь место стоянки чище, чем оно было до тебя. Это легко перекладывается и на программирование. Видишь грязный код? Сделай его чище, пока решаешь свою задачу. Не стоит увлекаться этим и если грязный код очень грязный, то стоит выделить отдельную задачу и время для его очистки.",
                "id": "t9nj6l"
              },
              {
                "content": "Не бойся вносить изменения. Если ты хочешь их сделать, то значит у тебя есть на то причины, а значит ты сделаешь код лучше и чище.",
                "id": "1h4z3w"
              },
              {
                "content": "Любая сущность должна отвечать только за одну отдельную задачу и выполнять ее хорошо.",
                "id": "b7nl1m"
              },
              {
                "content": "Если сущность отвечает сразу за два и более действий, то её функционал нужно разделять.",
                "id": "e8y14k"
              },
              {
                "content": "Код должен читаться сверху вниз.",
                "id": "u7c5c0"
              },
              {
                "content": "В хорошей и грамотной архитектуре внесение изменений обходится без значительных затрат и усилий.",
                "id": "1ne460"
              },
              {
                "content": "Удаляй мертвый код. Мертвый код это код, который не будет вызван ни при каких условиях или код, который нигде не используется.",
                "id": "7yjasr"
              }
            ]
          }
        ]
      },
      {
        "id": "1k47st",
        "content": [
          {
            "id": "2ukfbl",
            "content": [
              {
                "content": "Наименования и разделения",
                "id": "hqw82q",
                "style": 7
              },
              {
                "content": "Используй понятные и удобнопроизносимые имена для любых сущностей. Они должны описывать почему эта сущность существует, что она делает и как используется.",
                "id": "oak1bn"
              },
              {
                "content": "Не бойся тратить время на выбор лучшего и понятного имени. Ты выиграешь в будущем при работе или чтении этого кода.",
                "id": "nv1faa"
              },
              {
                "content": "Если название сущности не соответствует еë функционалу или по названию не понятно, что сущность делает, то еë надо переименовать в самое понятное название. Если этого сделать невозможно, то значит с еë функционалом что-то не так и еë надо рефакторить.",
                "id": "fsuw3l"
              },
              {
                "content": "Сущность, которая имеет в названии \"And\", \"With\" — нарушает принцип единственной отвественности. Функционал такой сущности следует разделить. Правда, этим правилом иногда стоит пренебрегать.",
                "id": "9dyc3p"
              },
              {
                "content": "Названия методов должны содержать глагол, который описывает, что этот метод делает и ключевое слово с которым работает данный метод. Если в названии метода нет глагола, то эта сущность не должна быть методом или ему нужно дать правильное название.",
                "id": "vmwyb0"
              },
              {
                "content": "Нужно избегать одинаковых наименований для двух разных целей.",
                "id": "zqos5c"
              },
              {
                "content": "Если сущность имеет схожее с другой сущностью название, то скорее всего их функционал очень сильно похож и их нужно объединить. Если нет, то их названия нужно менять так, чтобы они не были похожими.",
                "id": "wsi7m3"
              },
              {
                "content": "Если ты мысленно переименовываешь сущность, когда читаешь код, чтобы тебе было понятнее понимать её функционал, то переименуй её в это мысленное название.",
                "id": "l685l9"
              },
              {
                "content": "Выбери одно слово для одной концепции. Сложно будет понимать функционал, когда у тебя есть fetch, retrieve и get в названиях. Пусть лучше везде будет get.",
                "id": "e5mn6v"
              },
              {
                "content": "Длинное и понятное имя лучше, чем короткое, но непонятное.",
                "id": "1nn6rg"
              }
            ]
          }
        ]
      },
      {
        "id": "dd0sak",
        "content": [
          {
            "id": "adtsvt",
            "content": [
              {
                "content": "Функции",
                "id": "lrkszq",
                "style": 7
              },
              {
                "content": "Функции должны быть короткими и компактными.",
                "id": "nhe3ur"
              },
              {
                "content": "Функции должны быть очень короткими и очень компактными.",
                "id": "aw5gnu"
              },
              {
                "content": "Приблизительный максимум 20 строк и 150 символов в одной строке, если не влезает, то нужно разделять.",
                "id": "igxfwb"
              },
              {
                "content": "Функция должна выполнять только одну операцию.",
                "id": "imc23b"
              },
              {
                "content": "Она должна выполнять её хорошо и ничего другого она делать не должна.",
                "id": "jnau5v"
              },
              {
                "content": "Если функция выполняет только те действия, которые находятся на одном уровне абстракции, то функция выполняет одну операцию.",
                "id": "wijr7i"
              },
              {
                "content": "If, else, while и т.д. должны содержать вызов одной функции. Так будет читабельнее, понятнее и проще.",
                "id": "33r13f"
              },
              {
                "content": "Чем больше входных аргументов, тем тяжелее понимается функция.",
                "id": "86zj9m"
              },
              {
                "content": "Функция в которую передается аргумент-флаг, от которого зависит работа функции говорит о том, что функция выполняет более одной операции. Такие функции следует разбить на две и вызывать их уровнем выше.",
                "id": "jy8c0m"
              },
              {
                "content": "Если функция, должна изменять входной аргумент, то пусть она изменяет состояние своего объекта-владельца.",
                "id": "7q7ecs"
              },
              {
                "content": "Если входной аргумент функции не должен меняться и используется дальше в коде, то следует скопировать значение аргумента и внутри функции работать с копией.",
                "id": "6g0tqo"
              },
              {
                "content": "Если есть код, который должен следовать один за другим, то передавай результаты первой функции во вторую, чтобы кто-нибудь не изменил последовательность вызовов.",
                "id": "jp4lwj"
              },
              {
                "content": "Используй полиморфизм вместо if-else или switch-case или when.",
                "id": "wq2g7n"
              },
              {
                "content": "Избегай отрицательных условий.",
                "id": "o196x5"
              }
            ]
          }
        ]
      },
      {
        "id": "71f43v",
        "content": [
          {
            "id": "sonyxw",
            "content": [
              {
                "content": "Комментарии",
                "id": "vbr74g",
                "style": 7
              },
              {
                "content": "Не используй комментарии, если ты можешь использовать функцию или переменную вместо этого.",
                "id": "kjhx1i"
              },
              {
                "content": "Не комментируй плохой код — перепиши его если это допустимо. Не стоит объяснять, что происходит в плохом коде, лучше сделать его явным и понятным.",
                "id": "29thvo"
              },
              {
                "content": "Комментарии можно использовать для передачи какой-то информации, предупреждения о последствиях, но не для объяснения того, как работает код.",
                "id": "flshva"
              },
              {
                "content": "Используй TODO и FIXME в тех случаях, когда нужно пометить, что код нуждается в доработке, но сейчас нет ресурсов на это.",
                "id": "qi5ewx"
              },
              {
                "content": "Документируй код, который является сложным и чистым.",
                "id": "a1vyla"
              },
              {
                "content": "Не оставляй старый закомментированный код. Ты можешь найти его в истории коммитов, если необходимо.",
                "id": "3o6aqe"
              },
              {
                "content": "Комментарии должны быть краткими и понятными. В комментариях с информацией не должно быть много информации.",
                "id": "e9cdkw"
              }
            ]
          }
        ]
      },
      {
        "id": "kuceka",
        "content": [
          {
            "id": "xpnuyg",
            "content": [
              {
                "content": "Форматирование и правила",
                "id": "69c7jg",
                "style": 7
              },
              {
                "content": "Соблюдай правила и codestyle, принятые в команде.",
                "id": "okirpb"
              },
              {
                "content": "Нужно иметь автоматические средства, которые будут форматировать код за тебя.",
                "id": "oytjhl"
              },
              {
                "content": "Файл с исходным кодом должен быть как газетная статья. Есть заголовок, краткое описание в виде параметров и содержание в виде функций. Если это не так, то стоит изменить форматирование.",
                "id": "ttdv06"
              },
              {
                "content": "Сущности, связанные друг с другом, должны находиться рядом, например, в одном package, чтобы было проще ориентироваться.",
                "id": "y85xjc"
              },
              {
                "content": "Переменные, поля класса должны находиться вверху класса.",
                "id": "bsg84e"
              },
              {
                "content": "Переменные методов должны находиться ближе к месту использования.",
                "id": "2k5d52"
              },
              {
                "content": "Функции должны находиться в порядке вызова. Если одна вызывает другую, то вызывающая функция должна находиться над вызываемой. C другой стороны, приватные функции более низкого уровня могут находиться внизу файла и не мешать пониманию кода высокого уровня.",
                "id": "vb79g2"
              }
            ]
          }
        ]
      },
      {
        "id": "rbqh04",
        "content": [
          {
            "id": "ljs6k7",
            "content": [
              {
                "content": "Объекты и структуры данных",
                "id": "97clbw",
                "style": 7
              },
              {
                "content": "Ты должен работать с абстракциями, чтобы реализацию можно было легко изменить.",
                "id": "nzhdb0"
              },
              {
                "content": "Ты должен работать с абстракциями, потому что клиент, использующий функционал, не должен знать о деталях реализации, он должен знать какую реализацию в каком случае использовать.",
                "id": "l247iy"
              },
              {
                "content": "Ты должен предоставлять API, с которым стоит работать и скрывать детали реализации, структуру. Так будет проще работать с такими сущностями и добавлять новые виды поведений, функционала и реализаций.",
                "id": "pf9gjq"
              },
              {
                "content": "DTO — Data Transfer Object. Класс, который содержит только данные и никакого функционала. Нужен для того, чтобы передавать какие-то данные. Объект такого класса должен быть неизменяемым.",
                "id": "62mzyl"
              }
            ]
          }
        ]
      },
      {
        "id": "pfuoto",
        "content": [
          {
            "id": "3jagyu",
            "content": [
              {
                "content": "Классы",
                "id": "9ix7mq",
                "style": 7
              },
              {
                "content": "Классы должны быть компактными.",
                "id": "jy4d2q"
              },
              {
                "content": "Классы должны быть еще компактнее.",
                "id": "lb5tej"
              },
              {
                "content": "Имя класса должно описывать его ответственности. Отсюда можно и вычислить размер класса.",
                "id": "mb8z4z"
              },
              {
                "content": "Функционал класса должен четко соответствовать и вписываться в название класса.",
                "id": "zgf2xq"
              },
              {
                "content": "Разделяй связанность на маленькие классы. Жесткой и обильной связанности не должно быть — это усложняет поддержку и развитие проекта.",
                "id": "9qctmm"
              },
              {
                "content": "Помни о принципе единственной отвественности. Сущность должна иметь одну и только одну причину для изменения.",
                "id": "av8o5x"
              },
              {
                "content": "Соблюдай инкапсуляцию. Ослабление инкапсуляции всегда должно быть последней мерой.",
                "id": "i0qyqp"
              },
              {
                "content": "Обычно мы объявляем переменные и вспомогательные функции приватными, но иногда их нужно объявлять protected и иметь возможность обратиться к ней из теста.",
                "id": "k569fo"
              },
              {
                "content": "Если группа функций относится к определенному функционалу, то эту группу функций можно и нужно выделить в отдельный класс и использовать его экземпляр.",
                "id": "jjq97b"
              }
            ]
          }
        ]
      },
      {
        "id": "3ups0w",
        "content": [
          {
            "id": "03o35u",
            "content": [
              {
                "content": "Обработка ошибок",
                "id": "d2b706",
                "style": 7
              },
              {
                "content": "Используй Exceptions вместо возвращения кодов ошибок.",
                "id": "vgespl"
              },
              {
                "content": "Обработка ошибок — это одна операция. Если в функции есть ключевое слово try, то после блоков catch-finally ничего другого в функции быть не должно.",
                "id": "ai22sb"
              },
              {
                "content": "Если у тебя есть набор предопределенных констант (enum), который перечисляет ошибки, то от него лучше избавиться и вместо него использовать исключения.",
                "id": "8fhshb"
              },
              {
                "content": "Используй unchecked exceptions, чтобы явно указать на место в котором есть проблемы. Такие ошибки не нужно отлавливать, вместо этого нужно написать код так, чтобы этой ошибки никогда не было.",
                "id": "lt64aa"
              },
              {
                "content": "Передавай достаточное количество информации вместе с выбросом исключения, чтобы потом пользователи твоего кода могли понять, что же действительно произошло.",
                "id": "2cyouh"
              },
              {
                "content": "Вместо условных операторов с обработкой ошибок лучше выбрасывать исключения и обрабатывать их.",
                "id": "q7juqh"
              },
              {
                "content": "Не передавай null куда-либо. Старайся этого максимально избежать.",
                "id": "7fak60"
              },
              {
                "content": "Обработка ошибок — это отдельная задача и не относится к основной логике программы.",
                "id": "g5babs"
              }
            ]
          }
        ]
      },
      {
        "id": "dydxsd",
        "content": [
          {
            "id": "j1gxte",
            "content": [
              {
                "content": "Границы",
                "id": "pd2928",
                "style": 7
              },
              {
                "content": "Мы всегда используем какие-либо библиотеки, которые чаще всего дают нам слишком широкий, слишком маленький функционал или конфликтуют с ожидаемым функционалом, что делает код грязнее в его конечном использовании. Избежать этого можно просто применив паттерны типа Decorator, Adapter, Facade или другие.",
                "id": "9nqoln"
              },
              {
                "content": "Бывают ситуации, когда тебе нужно работать с функционалом, который находится в разработке или пока что не адаптирован для использования в продакшен коде. В этом случае стоит представить чего ты ждешь от библиотеки, этого функционала и написать свой интерфейс или создать сущность с которыми ты будешь работать в своем проекте так, как тебе нужно. Когда библиотека  будет готова, ты адаптируешь её под свои структуры и будешь использовать уже готовый функционал.",
                "id": "329bia"
              }
            ]
          }
        ]
      },
      {
        "id": "37zjpf",
        "content": [
          {
            "id": "4f6fxk",
            "content": [
              {
                "content": "Ссылки",
                "id": "nn6w3j",
                "style": 7
              },
              {
                "content": "https://habr.com/ru/post/424051/",
                "id": "vx65fv",
                "style": 8
              },
              {
                "content": "https://technical-excellence.ru/wiki/CleanCode.html",
                "id": "vbwdwn",
                "style": 8
              },
              {
                "content": "https://refactoring.guru/ru",
                "id": "jqjyjr",
                "style": 8
              }
            ]
          }
        ]
      }
    ],
    "localeOptions": [
      "en"
    ],
    "pageWidth": 700,
    "compactMenuMode": true
  },
  "exporter": {
    "format": 3,
    "allowLocales": true,
    "allowBlockStyles": true,
    "allowMergePages": false,
    "outputDirectory": "/Users/artemy/Desktop/prototext",
    "outputFilename": "",
    "isSchematicPreview": true
  },
  "presenter": {
    "sidebarMode": true,
    "allPagesMode": false,
    "tagFilterMode": false,
    "exposeLinkedContent": false,
    "locale": 0,
    "slideMode": true,
    "fitImgMode": true,
    "fullWidthImgMode": false,
    "contrastDarkMode": false,
    "sharpImgMode": true
  },
  "encryption": null
}