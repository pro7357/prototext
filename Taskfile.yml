version: '3'

dotenv: ['.env']


vars:
  RELEASES_DIR: "./electron/releases"
  PUBLIC_RELEASES_DIR: "{{.RELEASES_DIR}}/public"
  PUBLIC_WEBSITE_DIR: "./website/dst"
  PUBLIC_APP_INFO_FILE: "./website/src/app-info.json"


tasks:

  up:
    desc: Start App in Development mode.
    cmds:
      - pm2 start 'npm start' --name 'prototext-frontend'

  down:
    desc: Stop Development mode.
    cmds:
      - pm2 kill


  reset:
    desc: Reset App in Development mode.
    cmds:
      - task down
      - task up


  electron:
    desc: Start Electron in Development mode.
    cmds:
      - cd electron && npm start


  app:
    desc: Build React App & start Electron in Development mode.
    cmds:
      - task: buildReact
      - task: electron


  buildReact:
    desc: Build React App.
    cmds:
      - npm run build:desktop


  buildAppMacIntel:
    desc: Build App for MacOS Intel.
    cmds:
      - rm -rf ./electron/releases/ProtoText-darwin-x64
      - cd electron && npm run build:macIntel
      - rm -f ./electron/releases/ProtoText-darwin-x64/ProtoText.app/Contents/Resources/app/utils/bin/ffmpeg.exe


  buildAppWin64:
    desc: Build App for Windows.
    cmds:
      - rm -rf ./electron/releases/ProtoText-win32-x64
      - cd electron && npm run build:win64
      - rm -f ./electron/releases/ProtoText-win32-x64/resources/app/utils/bin/ffmpeg


  logApp:
    desc: Display Development logs.
    cmds:
      - pm2 log prototext-frontend



  # PRODUCTION RELEASES

  release:
    cmds:

      # Increase App version (0=major or 1=minor or 2=patch)
      - node ./scripts/updatePublicAppInfo.js {{.updLevel}}

      # Build React app
      - task: buildReact

      # Build MacOS Intel App
      - task: buildAppMacIntel

      # Build Windows x64 App
      - task: buildAppWin64

      # Clean public releases dir
      - rm -rf {{.PUBLIC_RELEASES_DIR}}/*

      # Zip all releases
      - node ./scripts/compressAppReleases.js {{.RELEASES_DIR}} {{.PUBLIC_RELEASES_DIR}}


  releaseMajor:
    desc: Release a major build version.
    cmds:
      - task: release
        vars: {updLevel: "0"}


  releaseMinor:
    desc: Release a minor build version.
    cmds:
      - task: release
        vars: {updLevel: "1"}


  releasePatch:
    desc: Release a patch build version.
    cmds:
      - task: release
        vars: {updLevel: "2"}


  publishApp:
    desc: Send releases to the server via SSH & update the public app info.
    cmds:
      - rsync -ru --size-only -P {{.PUBLIC_RELEASES_DIR}}/* $SSH_USER@$SSH_IP:~/$SSH_DIR/releases
      - rsync -P {{.PUBLIC_APP_INFO_FILE}} $SSH_USER@$SSH_IP:~/$SSH_DIR/
      - task: updateSite



  # WEBSITE

  upSite:
    desc: Start Website Development.
    cmds:
      - pm2 start 'npm run website' --name 'prototext-website'


  logSite:
    desc: Log Website Development.
    cmds:
      - pm2 log prototext-website


  restartSite:
    desc: Restart Website Development.
    cmds:
      - pm2 restart prototext-website


  buildSite:
    desc: Build Website.
    cmds:
      - rm -rf {{.PUBLIC_WEBSITE_DIR}}
      - npm run build:website


  publishSite:
    desc: Publish Website. # Send all website files from "dst" dir to the server via SSH.
    cmds:
      - rsync -ru --size-only -P {{.PUBLIC_WEBSITE_DIR}}/* $SSH_USER@$SSH_IP:~/$SSH_DIR/


  updateSite:
    desc: Build Website & publish it.
    cmds:
      - task: buildSite
      - task: publishSite